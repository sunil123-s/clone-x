// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String     @id @default(cuid())
  userName      String     @unique
  fullName      String
  email         String     @unique
  password      String
  profileImg    String?
  coverImg      String? 
  bio           String?
  link          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  following     Follower[] @relation("following")
  followers     Follower[] @relation("followers")
  posts         Post[]     @relation("UserPosts") // One-to-many relationship with Post
  comments      Comment[]  @relation("UserComments")
  like          Like[] 
  sentnotification Notification[] @relation("NotificationSent")
  receviednotification Notification[] @relation("NotificationRecevid")
}

model Follower {
  id           String   @id @default(cuid())
  user         User     @relation("following", fields: [userId], references: [id])
  userId       String
  follower     User     @relation("followers", fields: [followerId], references: [id])
  followerId   String
  createdAt    DateTime @default(now())

  @@unique([userId, followerId])
}

model Post {
  id           String     @id @default(cuid())
  text         String?    // Text field, optional
  image        String?    // Image field, optional
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  author       User       @relation("UserPosts", fields: [authorId], references: [id])
  authorId     String
  likes        Int        @default(0) // Number of likes, default to 0
  comments     Comment[]  @relation("PostComments") // One-to-many relationship with Comment
  like Like[]
  postNotification Notification[] @relation("PostNotificationSent")
  
}

model Comment {
  id        String   @id @default(cuid())
  content   String?   // Comment content
  createdAt DateTime @default(now())
  post      Post     @relation("PostComments", fields: [postId], references: [id],onDelete: Cascade)
  postId    String
  user      User     @relation("UserComments", fields: [userId], references: [id])
  userId    String
  commentNotification Notification[] @relation("CommentNotificationSent")
}

model Like {
  id        String   @id @default(cuid())
  userId  String
  postId String
  user User @relation(fields: [userId],references: [id])
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)

  @@unique([userId,postId])
}

model Notification{
  id String @id @default(cuid())
  type String
  createdAt DateTime @default(now())
  receiver User @relation("NotificationRecevid",fields: [receiverId], references: [id])
  receiverId String
  sender User @relation("NotificationSent",fields: [senderId], references: [id])
  senderId String
  post Post? @relation("PostNotificationSent",fields: [postId], references: [id],onDelete: Cascade)
  postId String?
  comment Comment? @relation("CommentNotificationSent",fields: [commentId], references: [id])
  commentId String?
  read Boolean @default(false)

}